cimport #LIBNAME as qpgen

import numpy as np

cdef class QP:
  cdef qpgen.PyQPgenData * data
  cdef double * target
  cdef double * x0
  cdef double * result
  cdef double * x1
  cdef double * u
  cdef int * num_iterations
  cdef int statessize
  cdef int inputssize
  cdef int datasize
  
  def __cinit__(self):
    self.data = qpgen.allocate()
        
    self.target = qpgen.target(self.data)
    self.x0 = qpgen.x0(self.data)
    self.num_iterations = qpgen.num_iterations(self.data)
    self.result = qpgen.result(self.data)
    self.x1 = qpgen.x1(self.data)
    self.u = qpgen.u(self.data)
    
    self.statessize =  qpgen.NUM_STATES*qpgen.HORIZON
    self.inputssize =  qpgen.NUM_INPUTS*qpgen.HORIZON
    self.datasize = self.statessize+self.inputssize

  def __dealloc__(self):
    qpgen.deallocate(&self.data)

  def horizon(self): return qpgen.HORIZON
  def numStates(self): return qpgen.NUM_STATES
  def numInputs(self): return qpgen.NUM_INPUTS
  def numOutputs(self): return qpgen.NUM_OUTPUTS
  def tolerance(self): return qpgen.TOLERANCE
  def maxIterations(self): return qpgen.MAX_ITERATIONS

  def setState(self, values):    
    if len(values) != qpgen.NUM_STATES:
      raise IndexError("Size of input array ({}) does not match number of states ({})".format(len(values), qpgen.NUM_STATES))
    for idx in range(0,qpgen.NUM_STATES):
      self.x0[idx] = values[idx]

  def getState(self):
    return [self.x0[i] for i in range(0, qpgen.NUM_STATES)]    

  def setTargetState(self, x):
    if len(x) != qpgen.NUM_STATES:
      raise IndexError("Size of input array does ({}) not match number of states ({})".format(len(x), qpgen.NUM_STATES))
    Q = np.array(self.getQ()).reshape(qpgen.NUM_STATES, qpgen.NUM_STATES)
    self.setTargetStates(np.tile(np.dot(Q, x), qpgen.HORIZON).reshape(qpgen.NUM_STATES*qpgen.HORIZON, 1))
    

  def setTargetInputs(self, values):
    if len(values) != self.inputssize:
      raise IndexError("Size of input array does ({}) not match number of inputs ({}x{}={})".format(len(values), qpgen.NUM_INPUTS, qpgen.HORIZON, self.inputssize))
    j = self.statessize
    for i in range(0,self.inputssize):
      self.target[j] = -values[i]
      j += 1

  def setTargetStates(self, values):
    if len(values) != self.statessize:
      raise IndexError("Size of input array ({}) does not match number of states ({}x{}={})".format(len(values), qpgen.NUM_STATES, qpgen.HORIZON, self.statessize))
    for i in range(0,self.statessize):
      self.target[i] = -values[i]

  def getTargetStates(self):
    return [self.target[i] for i in range(0, self.statessize)]

  def getControl(self):
    return [self.result[i] for i in range(self.statessize, self.statessize+qpgen.NUM_INPUTS)]

  def getFullStateVector(self):
    return [self.result[i] for i in range(0, self.statessize)]

  def getFullControlVector(self):
    return [self.result[i] for i in range(self.statessize, self.datasize)]
    
  def getFullDataVector(self):
    return [self.result[i] for i in range(0, self.datasize)]
  
  def getNumberOfIterations(self):
    return self.num_iterations[0]
    
  def getX1(self):
    return [self.x1[i] for i in range(0, qpgen.NUM_STATES)]

  def getSampleRate(self):
    return qpgen.SAMPLE_RATE

  cdef dblList(self, const double * a, unsigned int offs, unsigned int len):
    return [a[i] for i in range(offs, len)]

  def getA(self)    : return self.dblList(qpgen.getA(), 0, qpgen.NUM_STATES*qpgen.NUM_STATES)
  def getB(self)    : return self.dblList(qpgen.getB(), 0, qpgen.NUM_STATES*qpgen.NUM_INPUTS)
  def getR(self)    : return self.dblList(qpgen.getR(), 0, qpgen.NUM_INPUTS)
  def getQ(self)    : return self.dblList(qpgen.getQ(), 0, qpgen.NUM_STATES*qpgen.NUM_STATES)
  def getCx(self)   : return self.dblList(qpgen.getCx(), 0, qpgen.NUM_STATES*qpgen.NUM_OUTPUTS)
  def getXUb(self)  : return self.dblList(qpgen.getXUb(), 0, qpgen.NUM_OUTPUTS)
  def getXLb(self)  : return self.dblList(qpgen.getXLb(), 0, qpgen.NUM_OUTPUTS)
  def getXSoft(self): return self.dblList(qpgen.getXSoft(), 0,  min(qpgen.XSoftDATA_size, qpgen.NUM_OUTPUTS))
  def getCu(self)   : return self.dblList(qpgen.getCu(), 0, qpgen.NUM_INPUTS)
  def getUUb(self)  : return self.dblList(qpgen.getUUb(), 0, qpgen.NUM_INPUTS)
  def getULb(self)  : return self.dblList(qpgen.getULb(), 0, qpgen.NUM_INPUTS)
  def getUSoft(self): return self.dblList(qpgen.getUSoft(), 0, min(qpgen.USoftDATA_size, qpgen.NUM_INPUTS))

  def run(self):
    qpgen.run(self.data)
    return self.getControl()
  
  def sim(self, u):
    if len(u) != qpgen.NUM_INPUTS:
      raise IndexError("Size of input array ({}) does not match number of inputs ({})".format(len(u), qpgen.NUM_INPUTS))
    for i in range(0,qpgen.NUM_INPUTS):
      self.u[i] = u[i]
    qpgen.sim(self.data)
    return self.getX1()
